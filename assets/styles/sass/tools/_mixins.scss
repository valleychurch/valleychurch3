// Get a breakpoint
@mixin breakpoint($bp, $rule: min-width) {
  @if (map-get($VCbreakpoints, $bp) != 0) {
    @if ($rule == min-width) {
      @media screen and (#{$rule}: map-get($VCbreakpoints, $bp)) {
        @content;
      }
    }
    @else {
      @media screen and (#{$rule}: (map-get($VCbreakpoints, $bp) - 1)) {
        @content;
      }
    }
  }
  @else {
    @content;
  }
}


// 'Lato' typeface with correct stylistic sets enabled
@mixin font-stack($alternates: true) {
  font-family: $VCfont-stack;
  text-rendering: optimizeLegibility;

  @if ($alternates) {
    .fontvariant & {
      font-variant-alternates: styleset("ss04");
      font-feature-settings: "ss04";

      em {
        // font-variant-alternates: styleset('ss01'), styleset('ss03');
        // font-feature-settings: 'salt';
      }
    }
  }
}


// 'Usual' typeface with correct stylistic sets enabled
@mixin font-stack-alt($alternates: true) {
  font-family: $VCfont-stack-alt;
  text-rendering: optimizeLegibility;

  @if ($alternates) {
    .fontvariant & {
      font-variant-alternates: styleset("ss01"), styleset("ss03");
      font-feature-settings: "ss01", "ss03";
    }
  }
}

// Push in a pixel font size and get a rem one back
@mixin font-size($px-value) {
  font-size: font-size-rem($px-value);

  .lt-ie9 & {
    font-size: ceil($px-value) + px;
  }
}

// CSS lock for font-size
// http://fvsch.com/code/css-locks/
@mixin responsive-typography($base-size, $maximum-size, $lower-mq, $upper-mq) {
  $font-size-rem:         font-size-rem($base-size);
  $font-size-difference:  font-size-unitless($maximum-size - $base-size);

  @include font-size($base-size);

  @include breakpoint($lower-mq) {
    font-size: css-lock($font-size-rem, $font-size-difference, $lower-mq, $upper-mq);

    .no-csscalc & {
      @include font-size(($base-size + $maximum-size) / 2);
    }
  }

  @include breakpoint($upper-mq) {
    @include font-size($maximum-size);
  }
}


// Clearfix
@mixin clearfix() {
  &::after {
    display: table;
    clear: both;
    content: "";
  }
}


// Center block
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}


// Floats
@mixin pull-left() {
  float: left !important;
}

@mixin pull-right() {
  float: right !important;
}


// Avatar sizing
@mixin avatar-size($s: 32px) {
  width: $s;
  height: $s;

  font-size: round($s * .4);
  line-height: ($s - 4px);
  font-weight: $VCfont-bold;
}


// 100% height
@mixin full-height() {
  height: 100%;
}


// Default transition
@mixin transition($property: all, $timing: $VCtransition-timing, $easing: $VCtransition-easing) {
  transition: $property $timing $easing;
}


@mixin box-shadow($x-spacing: 0, $y-spacing: 0, $blur: 25px, $spread: 0, $colour: rgba(0,0,0,.1)) {
  box-shadow: $x-spacing $y-spacing $blur $spread $colour;
}

@mixin text-shadow($x-spacing: 0, $y-spacing: 0, $blur: 10px, $colour: $VCblack) {
  text-shadow: $x-spacing $y-spacing $blur $colour;
}
