// Get a breakpoint
@mixin breakpoint($bp, $rule: min-width) {
  @if (map-get($VCbreakpoints, $bp) != 0) {
    @if ($rule == min-width) {
      @media screen and (#{$rule}: map-get($VCbreakpoints, $bp)) {
        @content;
      }
    }
    @else {
      @media screen and (#{$rule}: (map-get($VCbreakpoints, $bp) - 1)) {
        @content;
      }
    }
  }
  @else {
    @content;
  }
}


// Return a fontsize
@mixin font-size($ms) {
  font-size: ms($ms) * $VCfont-size;
  font-size: ms($ms);
}


// Return a lineheight
@mixin line-height($ms) {
  //line-height: strip-units(ms($ms) * $ms-ratio);
  line-height: (ms($ms) * $VCratio);
}


// "Source Sans Pro" typeface with correct stylistic sets enabled
@mixin font-stack($alternates: true) {
  font-family: $VCfont-stack;
  text-rendering: optimizeLegibility;

  @if ($alternates) {
    .fontvariant.wf-active & {
      font-variant-alternates: styleset("ss01"), styleset("ss02"), styleset("ss03");
      font-feature-settings: "ss01", "ss02", "ss03";
    }
  }
}


// "Usual" typeface with correct stylistic sets enabled
@mixin font-stack-alt($alternates: true) {
  font-family: $VCfont-stack-alt;
  text-rendering: optimizeLegibility;

  @if ($alternates) {
    .fontvariant.wf-active & {
      font-variant-alternates: styleset("ss01"), styleset("ss03");
      font-feature-settings: "ss01", "ss03";
    }
  }
}


// Clearfix
@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}


// Center block
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}


// Floats
@mixin pull-left() {
  float: left !important;
}
@mixin pull-right() {
  float: right !important;
}


// Avatar sizing
@mixin avatar-size($s: 32px) {
  width: $s;
  height: $s;

  font-size: round($s * 0.4);
  line-height: ($s - 4px);
  font-weight: $VCfont-bold;

  // @if($s < 32px) {
  //     font-weight: 700;
  // } @else if($s >= 48px) {
  //     font-weight: 400;
  // } @else {
  //     font-weight: 600;
  // }
}