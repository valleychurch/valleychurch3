$__alpha-stops: (0, .05, .1, .15, .2, .25, .3, .35, .4, .45, .5, .55, .6, .65, .7, .75, .8, .85, .9, .95, 1);
$__shade-vals: ("x-dark", "dark", "base", "light", "x-light");

// Returns a grayscale value defined in $VCgrayscale-colours. $gradation is any
// number between 1 and 10. $alpha is optional and can be anything between 0.0
// and 1.0 in 0.05 increments.
@function grayscale($gradation, $alpha: 1) {
  @if map-has-key($VCgrayscale-colours, $gradation) {
    $alpha-val: $alpha;

    @if index($__alpha-stops, $alpha-val) == null {
      @error "Only alpha values in 0.05 increments are allowed";
    }

    $grayscale-val: map-get($VCgrayscale-colours, $gradation);
    @return rgba($grayscale-val, $alpha-val);
  } @else {
    @warn "No gradation of #{$gradation} found in $VCgrayscale-colours map.";
  }
}

@function greyscale($args...) {
  @return grayscale($args...);
}

//---------------------------
//
// The color function takes three arguments:
//  REQUIRED: Color
//    There are 7 colors (gray, blue, green, red, yellow, black, white).
//  OPTIONAL: Shade
//    Each color has 6 shades (x-dark, dark, base, medium, light, x-light).
//  OPTIONAL: Opacity
//    Each shade has 11 levels of opacity, ranging from 0.0 to 1.0 (transparent to opaque).
//
// Example: color(blue);
// This will create a base blue that is fully opaque.
//
// Example 2: color(red, dark, 0.8);
// This will create a dark red that is 80% opaque.
//
// Example 3: color(yellow, 0.6);
// This will create a base yellow that is 60% opaque.
//
//---------------------------
@function colour($name, $properties...) {
  $n: length($properties);
  $i: 1;

  $shade-val: "base";
  $alpha-val: 1;

  @while $i <= $n {
    $current-property: (nth($properties, $i));

    @if type-of($current-property) == "string" {
      $shade-val: $current-property;
    }
    @else if type-of($current-property) == "number" {
      $alpha-val: $current-property;
    }

    $i: $i + 1;
  }

  @if index($__shade-vals, $shade-val) == null {
    @warn "Only the following shades are allowed: " + $__shade-vals;
  }

  @if index($__alpha-stops, $alpha-val) == null {
    @error "Only alpha values in 0.05 increments are allowed";
  }

  @if map-has-key($VCcolours, $name) {
    $rgb-val: ();

    @if $name == white or $name == black {
        $rgb-val: map-get($VCcolours, $name);
    }
    @else {
        $rgb-val: map-get(map-get($VCcolours, $name), $shade-val);
    }

    @return rgba($rgb-val, $alpha-val);
  }
  @else {
    @warn "No global color called #{$name} found."
    + "Are you sure it's in `variables?`";
  }
}

// Return a unitless number
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// Mathematical functions
@function quarter($n) {
  @return ($n / 4);
}

@function half($n) {
  @return ($n / 2);
}

@function three-quarters($n) {
  @return ($n / (1 / .75));
}

@function double($n) {
  @return ($n * 2);
}

@function quadruple($n) {
  @return ($n * 4);
}
