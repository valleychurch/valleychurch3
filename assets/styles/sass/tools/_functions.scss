$__alpha-stops: (0, .05, .1, .15, .2, .25, .3, .35, .4, .45, .5, .55, .6, .65, .7, .75, .8, .85, .9, .95, 1);
$__shade-vals: ("x-dark", "dark", "base", "light", "x-light");

// Returns a grayscale value defined in $VCgrayscale-colours. $gradation is any
// number between 1 and 10. $alpha is optional and can be anything between 0.0
// and 1.0 in 0.05 increments.
@function grayscale($gradation, $alpha: 1) {
  @if map-has-key($VCgrayscale-colours, $gradation) {
    $alpha-val: $alpha;

    @if index($__alpha-stops, $alpha-val) == null {
      @error "Only alpha values in 0.05 increments are allowed";
    }

    $grayscale-val: map-get($VCgrayscale-colours, $gradation);
    @return rgba($grayscale-val, $alpha-val);
  }

  @else {
    @warn "No gradation of #{$gradation} found in $VCgrayscale-colours map.";
  }
}

@function greyscale($args...) {
  @return grayscale($args...);
}

@function colour($colour, $tone: "base") {
  @return map-get(map-get($VCcolours, $colour), $tone);
}

@function breakpoint($bp) {
  @return map-get($VCbreakpoints, $bp);
}

// Slightly lighten a color
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Slightly darken a color
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Return a unitless number
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function rem($size) {
  $rem: $size / $VCfont-size;
  @return #{$rem}rem;
}

// Mathematical functions
@function divisor($n, $multiplier) {
  @return ($n / $multiplier);
}

@function quarter($n) {
  @return ($n / 4);
}

@function third($n) {
  @return ($n / 3);
}

@function half($n) {
  @return ($n / 2);
}

@function three-quarters($n) {
  @return ($n / (1 / .75));
}

@function double($n) {
  @return ($n * 2);
}

@function triple($n) {
  @return ($n * 3);
}

@function quadruple($n) {
  @return ($n * 4);
}

@function tuple($n, $multiplier) {
  @return ($n * $multiplier);
}

@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }
  @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function font-size-rem($px-value) {
  @return ($px-value / $VCfont-size-unitless) + rem;
}

@function font-size-unitless($px-value) {
  @return ($px-value / $VCfont-size-unitless);
}

@function css-lock($base-size, $maximum-size, $lower-mq, $upper-mq) {
  $font-size-rem:         font-size-rem($base-size);
  $font-size-difference:  font-size-unitless($maximum-size - $base-size);
  $lower-mq-unitless:     strip-unit(breakpoint($lower-mq));
  $upper-mq-unitless:     strip-unit(breakpoint($upper-mq));

  @return calc(#{$font-size-rem} + #{$font-size-difference} * (100vw - #{breakpoint($lower-mq)}) / (#{$upper-mq-unitless} - #{$lower-mq-unitless}));
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
